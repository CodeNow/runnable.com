<!doctype html>
<html lang="">

  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Full-stack environments for your GitHub branches â€” Runnable</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/png" href="favicon.png">
    <link rel="stylesheet" href="styles/index.css">

    {{#if_eq env 'production-delta'}}
      @@include('../js/external/facebook.hbs')
      @@include('../js/external/trackjs.hbs')
      <script src="https://d2zah9y47r7bi2.cloudfront.net/releases/current/tracker.js"></script>
      @@include('../js/external/mixpanel-prod.hbs')
      <script src="https://widget.intercom.io/widget/wqzm3rju"></script>
      @@include('../js/external/google-analytics.hbs')
    {{/if_eq}}

    {{#if_eq env 'staging'}}
      <script src="https://widget.intercom.io/widget/xs5g95pd"></script>
      @@include('../js/external/mixpanel-staging.hbs')
    {{/if_eq}}

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js"></script>
    @@include('../js/index.hbs')

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
      function startVideo() {
        player.startVideo();
      }

      var videoStart = document.getElementsByClassName('video-start');
      var videoPause = document.getElementsByClassName('video-pause');
      if (videoStart) {
        for (var i = 0; i < videoStart.length; i++) {
          videoStart[i].addEventListener('click', startVideo);
          videoStart[i].addEventListener('touchstart', startVideo);
        }
        // for (var i = 0; i < videoPause.length; i++) {
        //   videoPause[i].addEventListener('click', pauseVideo);
        //   videoStart[i].addEventListener('touchstart', startVideo);
        // }
      }
    </script>

    <!--
      Commit Hash: {{{commitHash}}}
      Commit Time: {{{commitTime}}}
    -->

  <body class="page-landing page-video" ng-app="homeApp" ng-controller="MainCtrl" ontouchstart>

    @@include('components/icons.hbs')
    @@include('components/header.hbs')

    <main class="grid-block vertical main">
      @@include('html/video/video.hbs')
      @@include('html/video/video-hero.hbs')
      @@include('html/video/article-more.hbs')
    </main>

    @@include('components/signup-modal.hbs')

