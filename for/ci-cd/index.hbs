<!doctype html>
<html lang="en">

  <head>
    <style>.async-hide {opacity: 0 !important}</style>
<script>(function(a,s,y,n,c,h,i,d,e){s.className+=' '+y;h.end=i=function(){
s.className=s.className.replace(RegExp(' ?'+y),'')};(a[n]=a[n]||[]).hide=h;
setTimeout(function(){i();h.end=null},c);})(window,document.documentElement,
'async-hide','dataLayer',2000,{'GTM-5T3HJWM':true,});</script>


<base href="/runnable.com/">

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="description" content="">
<meta name="viewport" content="width=device-width, initial-scale=1">

<link rel="icon" type="image/png" href="favicon.png">
<!-- inject:css -->
<!-- endinject -->

<script>
  (function(self) {
  'use strict';

  if (self.fetch) {
    return
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob()
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift()
        return {done: value === undefined, value: value}
      }
    }

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      }
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value)
      }, this)

    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var list = this.map[name]
    if (!list) {
      list = []
      this.map[name] = list
    }
    list.push(value)
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    var values = this.map[normalizeName(name)]
    return values ? values[0] : null
  }

  Headers.prototype.getAll = function(name) {
    return this.map[normalizeName(name)] || []
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)]
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function(name) {
      this.map[name].forEach(function(value) {
        callback.call(thisArg, value, name, this)
      }, this)
    }, this)
  }

  Headers.prototype.keys = function() {
    var items = []
    this.forEach(function(value, name) { items.push(name) })
    return iteratorFor(items)
  }

  Headers.prototype.values = function() {
    var items = []
    this.forEach(function(value) { items.push(value) })
    return iteratorFor(items)
  }

  Headers.prototype.entries = function() {
    var items = []
    this.forEach(function(value, name) { items.push([name, value]) })
    return iteratorFor(items)
  }

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    reader.readAsArrayBuffer(blob)
    return fileReaderReady(reader)
  }

  function readBlobAsText(blob) {
    var reader = new FileReader()
    reader.readAsText(blob)
    return fileReaderReady(reader)
  }

  function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
      this._bodyInit = body
      if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString()
      } else if (!body) {
        this._bodyText = ''
      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
        // Only support ArrayBuffers for POST method.
        // Receiving ArrayBuffers happens via Blobs, instead.
      } else {
        throw new Error('unsupported BodyInit type')
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8')
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type)
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
        }
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        return this.blob().then(readBlobAsArrayBuffer)
      }

      this.text = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob)
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text')
        } else {
          return Promise.resolve(this._bodyText)
        }
      }
    } else {
      this.text = function() {
        var rejected = consumed(this)
        return rejected ? rejected : Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {}
    var body = options.body
    if (Request.prototype.isPrototypeOf(input)) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      if (!body) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    } else {
      this.url = input
    }

    this.credentials = options.credentials || this.credentials || 'omit'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }

  Request.prototype.clone = function() {
    return new Request(this)
  }

  function decode(body) {
    var form = new FormData()
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
    return form
  }

  function headers(xhr) {
    var head = new Headers()
    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\n')
    pairs.forEach(function(header) {
      var split = header.trim().split(':')
      var key = split.shift().trim()
      var value = split.join(':').trim()
      head.append(key, value)
    })
    return head
  }

  Body.call(Request.prototype)

  function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = options.status
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = options.statusText
    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  self.Headers = Headers
  self.Request = Request
  self.Response = Response

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request
      if (Request.prototype.isPrototypeOf(input) && !init) {
        request = input
      } else {
        request = new Request(input, init)
      }

      var xhr = new XMLHttpRequest()

      function responseURL() {
        if ('responseURL' in xhr) {
          return xhr.responseURL
        }

        // Avoid security warnings on getResponseHeader when not allowed by CORS
        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
          return xhr.getResponseHeader('X-Request-URL')
        }

        return
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: headers(xhr),
          url: responseURL()
        }
        var body = 'response' in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === 'include') {
        xhr.withCredentials = true
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
    })
  }
  self.fetch.polyfill = true
})(typeof self !== 'undefined' ? self : this);

  (function () {
  // Redirect
  Promise.all([
    fetch('{{apiUrl}}/users/me', { credentials: 'include' })
      .then(function (res) { return res.json(); }),
    fetch('{{apiUrl}}/auth/whitelist', { credentials: 'include' })
      .then(function (res) { return res.json(); }),
  ])
    .then(function (res) {
      var user = res[0];
      var whitelistedOrgs = res[1];

      // Get variables we need
      var org;
      try {
        org = user.userOptions.uiState.previousLocation.org;
      } catch (e) {
        return;
      }
      var prevInstance;
      try {
        prevInstance = user.userOptions.uiState.previousLocation.instance;
      } catch (e) {
        return;
      }

      // Populate sign-in url
      var newURL = '{{angularUrl}}/' + org;
      if (prevInstance) {
        newURL += '/' + prevInstance;
      }
      var els = document.getElementsByClassName('btn-sandbox');
      for (var i = 0; i < els.length; i++) {
        els[i].href = newURL;
      }

      // set up avatar
      var userAvatar = document.createElement('img');
      userAvatar.src = whitelistedOrgs[0].org.avatar_url;
      userAvatar.classList.add('grid-content','shrink','avatar');
      userAvatar.height = 21;
      userAvatar.width = 21;

      // set up org name
      var userOrg = document.createElement('div');
      userOrg.classList.add('text-overflow');
      userOrg.textContent = org;

      // set up btn-sandbox in headers
      var headerBtnSandbox = document.createElement('a');
      var overflowMenu = document.getElementsByClassName('btn-overflow')[0];
      headerBtnSandbox.href = newURL;
      headerBtnSandbox.classList.add('grid-block','btn','btn-sm','btn-white','text-white','strong','btn-sandbox','hidden-xs');
      headerBtnSandbox.appendChild(userAvatar.cloneNode(true));
      headerBtnSandbox.appendChild(userOrg.cloneNode(true));
      document.getElementsByTagName('nav')[0].insertBefore(headerBtnSandbox,overflowMenu);

      // set up btn-sandbox in menus
      var menuBtnSandbox = document.createElement('a');
      var menuDivider = document.getElementsByClassName('divider')[0];
      menuBtnSandbox.href = newURL;
      menuBtnSandbox.classList.add('btn','btn-sm','grid-block','justify-center','align-center','shrink','btn-sandbox','strong','visible-xs');
      menuDivider.classList.add('visible-xs');
      menuDivider.classList.remove('visible-md');
      menuBtnSandbox.appendChild(userAvatar.cloneNode(true));
      menuBtnSandbox.appendChild(userOrg.cloneNode(true));
      document.getElementsByClassName('list text-left')[0].insertBefore(menuBtnSandbox,menuDivider);

      // hide sign in and sign up links
      var hideIfSignedIn = document.getElementsByClassName('js-hide-if-signed-in');
      for (var z = hideIfSignedIn.length; z > 0; z--) {
        var i = z - 1;
        if (hideIfSignedIn[i].parentNode) {
          hideIfSignedIn[i].parentNode.removeChild(hideIfSignedIn[i]);
        }
      }
    });
}());

</script>

{{!-- structured data --}}
<script type="application/ld+json">
{
  "@context": "http://schema.org",
  "@type": "Organization",
  "url": "https://runnable.com",
  "logo": "https://runnable.com/images/runnable-logo.svg",
  "sameAs": [
    "https://www.facebook.com/runnable",
    "https://twitter.com/GetRunnable",
    "https://github.com/Runnable",
    "https://plus.google.com/+RunnableHQ"
  ],
  "contactPoint": [{
    "@type": "ContactPoint",
    "telephone": "+1-844-786-6225",
    "contactType": "customer service",
    "contactOption": "TollFree"
  }]
}
</script>
<script type="application/ld+json">
{
  "@context": "http://schema.org",
  "@type": "WebSite",
  "name": "Runnable",
  "url": "https://runnable.com"
}
</script>

    <title>Continuous integration/delivery for all code branches — Runnable</title>
    <script ugly>
      // modals
function openModal(event,dragging) {
  if (!dragging) {
    var openModal = document.getElementsByClassName('modal-backdrop in')[0];
    var modalName = event.target.getAttribute('data-target').substring(1);
    var modal = document.getElementById(modalName);
    var closeTrigger = modal.getElementsByClassName('js-modal-close')[0];

    // close open modal
    if (openModal) {
      openModal.classList.remove('in');
    }
    // show modal
    modal.classList.add('in');
    // stop scrolling
    document.body.classList.add('modal-open');
    // triggers for close button
    closeTrigger.addEventListener('click', closeModal);
    closeTrigger.addEventListener('touchend', closeModal);
    // trigger for esc key
    document.addEventListener('keydown', escModal);

    if (modalName === 'sign-up') {
      setupForm('signup');
    }

    if (modalName === 'video') {
      addVideo();
    }

    // mixpanel
    mixpanel.track('Open Modal: ' + modalName);
  }
}

function escModal(event) {
  if (event.keyCode == 27) {
    closeModal(event);
  }
}

function closeModal(event) {
  var modal = document.getElementsByClassName('modal-backdrop in')[0];
  var closeTrigger = modal.getElementsByClassName('js-modal-close')[0];
  var iframe;

  event.preventDefault();
  // hide modal
  modal.classList.remove('in');
  // resume scrolling
  document.body.classList.remove('modal-open');
  // remove triggers
  closeTrigger.removeEventListener('click', closeModal);
  closeTrigger.removeEventListener('touchend', closeModal);
  document.removeEventListener('keydown', escModal);
  // delete video if it exists
  if (modal.getElementsByTagName('iframe').length) {
    iframe = modal.getElementsByTagName('iframe')[0];
    iframe.parentNode.removeChild(iframe);
  }
}

// add video player
function addVideo() {
  var player = document.getElementById('video')
  var iframe = document.createElement('iframe');
  iframe.setAttribute('frameborder','0');
  iframe.setAttribute('allowfullscreen','');
  iframe.setAttribute('src', 'https://www.youtube.com/embed/BX5iPEWSrnY?showinfo=0&autoplay=1&rel=0');
  iframe.classList.add('video-player');
  player.appendChild(iframe);
}

// show bitbucket form
function openBitbucketForm() {
  var gitHubForm = document.getElementsByClassName('article-github')[0];
  var gitHubTrigger = document.getElementsByClassName('js-open-github')[0];
  var bitbucketForm = document.getElementsByClassName('article-bitbucket')[0];
  var bitbucketTrigger = document.getElementsByClassName('js-open-bitbucket')[0];

  bitbucketTrigger.classList.add('hide');
  bitbucketForm.classList.remove('out');
  bitbucketForm.classList.add('in');
  gitHubTrigger.classList.remove('hide');
  gitHubForm.classList.remove('in');
  gitHubForm.classList.add('out');
  // mixpanel
  mixpanel.track('Open Bitbucket form');
}

// show github form
function openGitHubForm() {
  var gitHubForm = document.getElementsByClassName('article-github')[0];
  var gitHubTrigger = document.getElementsByClassName('js-open-github')[0];
  var bitbucketForm = document.getElementsByClassName('article-bitbucket')[0];
  var bitbucketTrigger = document.getElementsByClassName('js-open-bitbucket')[0];

  gitHubTrigger.classList.add('hide');
  gitHubForm.classList.remove('out');
  gitHubForm.classList.add('in');
  bitbucketTrigger.classList.remove('hide');
  bitbucketForm.classList.remove('in');
  // mixpanel
  mixpanel.track('Open GitHub form');
}

// set up forms
function setupForm(formName) {
  var formEl;
  var formInputs;
  if (formName === 'signup') {
    var gitHubForm = document.getElementsByClassName('article-github')[0];
    var bitbucketForm = document.getElementsByClassName('article-bitbucket')[0];
    var openBitbucketFormTrigger = document.getElementsByClassName('js-open-bitbucket')[0];
    var openGitHubFormTrigger = document.getElementsByClassName('js-open-github')[0];
    var linkGitHub = document.getElementsByClassName('track-grant-access-github')[0];

    openGitHubFormTrigger.addEventListener('click', function(e) {
      e.stopPropagation();
      e.preventDefault();
      openGitHubForm();
    });
    openGitHubFormTrigger.addEventListener('touchend', function(e) {
      e.stopPropagation();
      e.preventDefault();
      openGitHubForm();
    });
    openBitbucketFormTrigger.addEventListener('click', function(e) {
      e.stopPropagation();
      e.preventDefault();
      openBitbucketForm();
    });
    openBitbucketFormTrigger.addEventListener('touchend', function(e) {
      e.stopPropagation();
      e.preventDefault();
      openBitbucketForm();
    });

    // mixpanel
    linkGitHub.addEventListener('click', function(){
      mixpanel.track('Open URL: GitHub Auth');
    });
    linkGitHub.addEventListener('touchend', function(){
      mixpanel.track('Open URL: GitHub Auth');
    });
  }

  formEl = document.getElementsByClassName('js-form');

  for (i = 0; i < formEl.length; i++) {
    formEl[i].addEventListener('change', makeDirty);
    formEl[i].addEventListener('submit', submitForm);
    formInputs = formEl[i].getElementsByTagName('input');

    for (y = 0; y < formInputs.length; y++) {
      if (formInputs[y].type !== 'checkbox') {
        formInputs[y].addEventListener('invalid', formInvalid);
      }
      if (formInputs[y].type === 'checkbox') {
        formInputs[y].addEventListener('change', validateCheckGroup);
      }
    }
  }
}

function markInvalid(e) {
  var thisTarget = e.target;
  var theseInputs;
  var i;

  if (thisTarget.tagName == 'INPUT') {
    thisTarget.classList.add('invalid');
  } else {
    // for change event
    theseInputs = thisTarget.getElementsByTagName('input');
    for (i = 0; i < theseInputs.length; i++) {
      if (!theseInputs[i].validity.valid) {
        theseInputs[i].classList.add('invalid');
      }
    }
  }
  validateCheckGroup(e);
}

function shakeForm(e) {
  var thisForm = e.target;

  // get shake element
  if (!thisForm.classList.contains('shake-me')) {
    while ((thisForm = thisForm.parentNode) && !thisForm.classList.contains('shake-me'));
  }
  thisForm.classList.add('shake');
  thisForm.addEventListener('animationend', function(){
    thisForm.classList.remove('shake');
    thisForm.removeEventListener('animationend', function(){});
  });
}

function makeDirty(e) {
  var thisTarget = e.target;
  var checkGroup;

  // checkbox logic
  if (thisTarget.type === 'checkbox') {
    // get parent
    while ((thisTarget = thisTarget.parentNode) && !thisTarget.classList.contains('checkbox-group'));
    checkGroup = thisTarget
    checkGroup.classList.remove('pristine');
  } else {
    thisTarget.classList.remove('pristine', 'invalid');
  }
}

function validateCheckGroup(e) {
  var thisTarget;
  var checkGroup;
  var theseInputs;
  var itemChecked = false;
  var otherInput;
  var otherListened = false;

  if (e.target.type !== 'checkbox') {
    thisTarget = false;
    checkGroup = document.getElementsByClassName('checkbox-group')[0];
  } else {
    thisTarget = e.target;
    checkGroup = e.target;
    while ((checkGroup = checkGroup.parentNode) && !checkGroup.classList.contains('checkbox-group'));
  }

  // get all checkboxes
  theseInputs = checkGroup.querySelectorAll('[type="checkbox"]');

  // toggle required state
  if (thisTarget.checked) {
    // if an "other" option
    if (thisTarget.value === 'Other') {
      otherInput = thisTarget.parentNode.querySelectorAll('[name="why-other"]')[0];
      otherInput.setAttribute('required','required');

      if (!otherListened) {
        otherInput.addEventListener('click',function(e){
          e.preventDefault();
          otherListened = true;
        })
      }
    }
    // remaining options
    for (i = 0; i < theseInputs.length; i++) {
      theseInputs[i].removeAttribute('required');
    }
    checkGroup.classList.remove('invalid');
    itemChecked = true;
  } else if (!thisTarget.checked || !thisTarget) {
    for (i = 0; i < theseInputs.length; i++) {
      if (theseInputs[i].checked) {
        itemChecked = true;
      }
    }
  }

  if (!itemChecked) {
    for (i = 0; i < theseInputs.length; i++) {
      theseInputs[i].setAttribute('required','required');
    }
    // mark invalid
    checkGroup.classList.add('invalid');
  }
}

function formInvalid(e) {
  markInvalid(e);
  shakeForm(e);
}

function toggleEditing(form, state) {
  var i;
  var theseInputs = form.getElementsByTagName('input');
  var theseTextareas = form.getElementsByTagName('textarea')[0];
  var submitButton = form.getElementsByTagName('button')[0];
  var spinner = document.getElementsByClassName('spinner-wrapper');

  if (state === 'disable') {
    if (theseInputs) {
      for (i = 0; i < theseInputs.length; i++) {
        theseInputs[i].disabled = true;
      }
    }
    if (theseTextareas) {
      theseTextareas.disabled = true;
    }
    submitButton.disabled = true;
    if (submitButton.classList.contains('green')) {
      submitButton.children[0].innerHTML += '<div class="grid-content shrink spinner-wrapper spinner-sm spinner-white"><svg viewbox="0 0 16 16" class="spinner"><circle cx="8" cy="8" r="7" stroke-linecap="round" class="path"></circle></svg></div>';
    } else {
      submitButton.children[0].innerHTML += '<div class="grid-content shrink spinner-wrapper spinner-sm spinner-gray"><svg viewbox="0 0 16 16" class="spinner"><circle cx="8" cy="8" r="7" stroke-linecap="round" class="path"></circle></svg></div>';
    }
  }
  if (state === 'enable') {
    if (theseInputs) {
      for (i = 0; i < theseInputs.length; i++) {
        theseInputs[i].disabled = false;
      }
    }
    if (theseTextareas) {
      theseTextareas.disabled = false;
    }
    submitButton.disabled = false;
    spinner[0].parentNode.removeChild(spinner[0]);
  }
}

function xhrSubmit(e, form, formData, formName) {
  var xhr = new XMLHttpRequest();
  var xhrUrl;
  var supportEmail;

  if (formName === 'github') {
    xhrUrl = 'https://codenow.com:2087/sign_up';
    supportEmail = 'support@runnable.com';
  } else if (formName === 'bitbucket') {
    xhrUrl = 'https://codenow.com:8443/bitbucket';
    supportEmail = 'bitbucket@runnable.com';
  } else if (formName === 'enterprise') {
    xhrUrl = 'https://codenow.com:2096/notify/enterprise';
    supportEmail = 'preview@runnable.com';
  }

  // send form
  xhr.open('POST', xhrUrl, true);
  xhr.setRequestHeader('Content-Type', 'application/json');
  xhr.send(formData);
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 0) {
      shakeForm(e);
      sundipValidation('An error occured. Send us an email at <a class="link" href="mailto:' + supportEmail + '">' + supportEmail + '</a> for help.', form, formName);
      toggleEditing(form, 'enable'); // re-enables form
      // mixpanel
      mixpanel.track('XHR Submit: ' + formName, {
        'server-side validation': 'fail',
        'error': 'xhr.readyState === 4 && xhr.status === 0'
      });
    }
  };

  xhr.onload = function() {
    var response = JSON.parse(xhr.responseText);
    var resultCode = response.result_code;
    var resultMessage = response.result_message;
    var successMsg = form.parentNode.getElementsByClassName('hide')[0];
    var href;

    // result_codes:
    // -1 = error from sundip
    // 0 = error from active campaign
    // 1 = success from active campaign
    if (resultCode === -1 || resultCode === 0) {
      shakeForm(e);
      sundipValidation(resultMessage, form, formName);
      // mixpanel
      mixpanel.track('XHR Submit: ' + formName, {
        'server-side validation': 'fail',
        'error': (resultCode === -1 ? 'From Sundip’s script' : 'From Active Campaign')
      });
    }

    if (resultCode === 1) {
      // mixpanel
      mixpanel.track('XHR Submit: ' + formName, {
        'server-side validation': 'pass'
      });

      // if github form, redirect to log in
      if (formName === 'github') {
        href = form.querySelectorAll('[data-href]')[0].getAttribute('data-href');
        window.location.href = href;
      } else {
        // tell the user something nice
        form.classList.add('hide');
        form.classList.remove('show');
        successMsg.classList.add('show');
        successMsg.classList.remove('hide');
      }
    }
    toggleEditing(form, 'enable'); // re-enables form
  };
}

function submitForm(e) {
  var form = e.target;
  var formName;

  if (form.classList.contains('form-github')) {
    formName = 'github';
  } else if (form.classList.contains('form-bitbucket')) {
    formName = 'bitbucket';
  } else if (form.classList.contains('form-enterprise')) {
    formName = 'enterprise';
  }

  e.preventDefault();

  if (form.checkValidity()) {
    var emailValue = form.querySelectorAll('[name="email"]')[0].value;
    var nameValue = form.querySelectorAll('[name="name"]')[0].value;
    var formData;
    var name = 'name';

    // special github form data
    if (formName === 'github') {
      var whyInputs = form.querySelectorAll('[name="checkbox-why"]');
      var whyValue = [];
      var otherValue;

      // change name to be labelled company
      name = 'company';

      whyInputs.forEach(function (whyInputs) {
        var obj = {
          name: whyInputs.value,
          checkbox: whyInputs.checked
        }

        if (whyInputs.value === 'Other') {
          obj.otherValue = form.querySelectorAll('[name="why-other"]')[0].value;
        }
        whyValue.push(obj);
      });
    }

    toggleEditing(form, 'disable'); // disables inputs
    // jsonify form data
    formData = {
      email: emailValue,
      why: whyValue
    };
    // add name
    formData[name] = nameValue;

    analytics.ready(function() {
      analytics.track(formName + '-list sign up', {email: emailValue, name: nameValue, clientId: ga.getAll()[0].get('clientId')});
    });
    formData = JSON.stringify(formData); // convert to JSON
    xhrSubmit(e, form, formData, formName);
    // mixpanel
    mixpanel.track('FE Submit: ' + formName, {
      'front-end validation': 'pass'
    });
  }
}

function sundipValidation(resultMessage, form, formName) {
  var prevError = form.getElementsByClassName('js-error')[0];
  var error;
  var submitButton;

  if (prevError) {
    prevError.parentNode.removeChild(prevError);
  }

  if (formName === 'github' || formName === 'bitbucket') {
    error = document.createElement('div');
    error.classList.add('well', 'well-red', 'text-center', 'small','padding-xxs','margin-top-md','js-error');
    error.innerHTML = resultMessage;
    form.children[0].appendChild(error);
  } else {
    submitButton = form.getElementsByTagName('button')[0];
    error = document.createElement('small');
    error.classList.add('popover', 'bottom', 'in', 'small','red','text-center');
    error.innerHTML = resultMessage;
    submitButton.appendChild(error);
  }

  analytics.ready(function() {
    analytics.track('Error ' + formName + '-list form', {error: resultMessage, clientId: ga.getAll()[0].get('clientId')});
  });
}

// events
window.addEventListener('DOMContentLoaded', function(){
  var modalTriggers = document.getElementsByClassName('js-modal');
  var dBody = document.body;
  var dragging = false;
  var i;

  // prevent drag touch
  dBody.addEventListener('touchmove',function(){dragging = true;});
  dBody.addEventListener('touchstart',function(){dragging = false;});

  // modals
  if (modalTriggers) {
    for (i = 0; i < modalTriggers.length; i++) {
      /* jshint loopfunc: true */
      modalTriggers[i].addEventListener('click', function(event){
        openModal(event,dragging);
      });
      modalTriggers[i].addEventListener('touchend', function(event){
        openModal(event,dragging);
      });
    }
  }

  // if sign up form exists
  if (document.getElementsByClassName('form-github')) {
    setupForm('signup');
  }
  // if pricing page
  if (document.getElementsByClassName('form-enterprise')) {
    setupForm('enterprise');
  }
});

window.addEventListener('load', function(){
  // stub fbq
  if (!window.fbq) {
    window.fbq = function () {};
  }
});

      // polyfill for svgs with base element
(function(document, window) {
  'use strict';
  document.addEventListener('DOMContentLoaded', function() {
    // Current URL, without the hash
    var baseUrl = window.location.href.replace(window.location.hash, '');
      [].slice.call(document.querySelectorAll("use[*|href]"))
        .filter(function(element) {
          return (element.getAttribute('xlink:href').indexOf('#') === 0);
        })
        .forEach(function(element) {
          element.setAttribute('xlink:href', baseUrl + element.getAttribute('xlink:href'));
        });
  }, false);
}(document, window));

      // toggles
function toggle(e) {
  var i;
  var toggler = e.target;
  var togglerElements = document.getElementsByClassName('js-toggler');
  var toggleType;
  var toggleElements = document.getElementsByClassName('js-toggle');

  // get parent
  if (!toggler.classList.contains('js-toggler')) {
    while ((toggler = toggler.parentElement) && !toggler.classList.contains('js-toggler'));
  }

  // only toggle things if it's not already active
  if (!toggler.classList.contains('active')) {
    toggleType = toggler.getAttribute('data-toggler');

    for (i = 0; i < togglerElements.length; i++) {
      togglerElements[i].classList.remove('active');
    }

    for (i = 0; i < toggleElements.length; i++) {

      if (toggleElements[i].classList.contains('fade')) {
        toggleElements[i].classList.remove('in');

        if (toggleType === toggleElements[i].getAttribute('data-toggle')) {
          toggleElements[i].classList.add('in');
        }
      } else {
        toggleElements[i].classList.add('hide');

        if (toggleType === toggleElements[i].getAttribute('data-toggle')) {
          toggleElements[i].classList.remove('hide');
        }
      }
    }

    toggler.classList.add('active');
  }
}

// events
window.addEventListener('DOMContentLoaded', function(){
  var i;
  var toggler = document.getElementsByClassName('js-toggler');

  // flipping cards
  if (toggler) {
    for (i = 0; i < toggler.length; i++) {
      toggler[i].addEventListener('click', toggle);
      toggler[i].addEventListener('touchend', toggle);
    }
  }
});

      window.addEventListener('load', function(){
  var statusPage = new StatusPage.page({page:'ngvk75ydhg3t'});
  var footer = document.getElementsByClassName('footer')[0];
  var statusElement = document.createElement('a');
  var statusText;
  var statusColor;

  // set up status element
  statusElement.href = '//status.runnable.com';
  statusElement.classList.add('btn','btn-xs','link','strong','status');

  statusPage.components({
    success : function(data) {
      // add status element
      footer.appendChild(statusElement);

      // set text
      switch (data.components[0].status) {
        case 'operational':
          statusText = 'Status: Beary good!';
          statusColor = 'status-green';
          break;
        case 'degraded_performance':
        case 'partial_outage':
          statusText = 'Partial Outage';
          statusColor = 'status-orange';
          break;
        case 'major_outage':
          statusText = 'Major Outage';
          statusColor = 'status-red';
          break;
      }

      statusElement.textContent = statusText;
      statusElement.classList.add(statusColor);
    }
  });
});

    </script>

    <!--
      Commit Hash: {{{commitHash}}}
      Commit Time: {{{commitTime}}}
    -->

  <body class="page-landing" ontouchstart>

    <svg xmlns="http://www.w3.org/2000/svg" class="icon-defintions">
  <symbol id="icons-bitbucket" viewBox="0 0 27.438 31.681">
    <path d="M29.208,3.519a3.47,3.47,0,0,0-.729-0.738,8.244,8.244,0,0,0-2.01-1.1A21.7,21.7,0,0,0,21.768.45,39.134,39.134,0,0,0,10.037.434,24.268,24.268,0,0,0,6,1.385,10.419,10.419,0,0,0,3.525,2.549a4.165,4.165,0,0,0-.976.869,1.832,1.832,0,0,0-.4,1.479C2.32,5.989,2.48,7.082,2.66,8.169q0.4,2.417.811,4.828c0.306,1.787.62,3.573,0.918,5.36a2.026,2.026,0,0,0,.526,1.07,5.663,5.663,0,0,0,.574.543,9.178,9.178,0,0,0,2.432,1.354,20.379,20.379,0,0,0,6.485,1.328,25.257,25.257,0,0,0,4.838-.187,19.46,19.46,0,0,0,4.011-.948,10.809,10.809,0,0,0,2.725-1.382,4.323,4.323,0,0,0,.945-0.9,1.791,1.791,0,0,0,.354-0.805c0.4-2.341.809-4.679,1.2-7.021,0.362-2.172.7-4.346,1.058-6.518A1.78,1.78,0,0,0,29.208,3.519ZM15.82,19.64a4.361,4.361,0,1,1,4.386-4.334A4.359,4.359,0,0,1,15.82,19.64Zm8.7-15.246a1.832,1.832,0,0,1-.436.357,5.524,5.524,0,0,1-1.454.541,20.191,20.191,0,0,1-2.9.485,37.5,37.5,0,0,1-3.791.188,37.891,37.891,0,0,1-4.332-.238,15.852,15.852,0,0,1-3.146-.633,6.893,6.893,0,0,1-.883-0.381,1.385,1.385,0,0,1-.386-0.3A0.443,0.443,0,0,1,7.2,3.746,1.752,1.752,0,0,1,7.61,3.43a5.392,5.392,0,0,1,1.359-.512,20.355,20.355,0,0,1,2.994-.509,37.618,37.618,0,0,1,4.967-.172,30.478,30.478,0,0,1,4.55.431,10.33,10.33,0,0,1,2.075.545,5.336,5.336,0,0,1,.683.346,1.085,1.085,0,0,1,.288.266A0.422,0.422,0,0,1,24.522,4.394Zm1.664,18.367a0.955,0.955,0,0,1-.021.271c-0.305,1.6-.614,3.2-0.911,4.811a2.6,2.6,0,0,1-.724,1.377,5.442,5.442,0,0,1-1.448,1.023A12.151,12.151,0,0,1,20,31.274a18.806,18.806,0,0,1-3.563.407,20.746,20.746,0,0,1-5.917-.7,9.9,9.9,0,0,1-2.3-.953,5.078,5.078,0,0,1-1.042-.789,2.6,2.6,0,0,1-.741-1.4c-0.3-1.6-.609-3.207-0.915-4.81A1.12,1.12,0,0,1,5.5,22.79a0.479,0.479,0,0,1,.724-0.423c0.036,0.021.072,0.041,0.105,0.063a13.221,13.221,0,0,0,3.858,1.856,18.062,18.062,0,0,0,3.873.758,19.587,19.587,0,0,0,4.54-.11,16.41,16.41,0,0,0,5.687-1.827c0.354-.194.686-0.43,1.025-0.646a1.715,1.715,0,0,1,.167-0.1A0.48,0.48,0,0,1,26.186,22.761Zm-8.159-7.477a2.185,2.185,0,1,1-2.177-2.193A2.192,2.192,0,0,1,18.027,15.284Z", transform="translate(-2.122)"</<path d="M29.208,3.519a3.47,3.47,0,0,0-.729-0.738,8.244,8.244,0,0,0-2.01-1.1A21.7,21.7,0,0,0,21.768.45,39.134,39.134,0,0,0,10.037.434,24.268,24.268,0,0,0,6,1.385,10.419,10.419,0,0,0,3.525,2.549a4.165,4.165,0,0,0-.976.869,1.832,1.832,0,0,0-.4,1.479C2.32,5.989,2.48,7.082,2.66,8.169q0.4,2.417.811,4.828c0.306,1.787.62,3.573,0.918,5.36a2.026,2.026,0,0,0,.526,1.07,5.663,5.663,0,0,0,.574.543,9.178,9.178,0,0,0,2.432,1.354,20.379,20.379,0,0,0,6.485,1.328,25.257,25.257,0,0,0,4.838-.187,19.46,19.46,0,0,0,4.011-.948,10.809,10.809,0,0,0,2.725-1.382,4.323,4.323,0,0,0,.945-0.9,1.791,1.791,0,0,0,.354-0.805c0.4-2.341.809-4.679,1.2-7.021,0.362-2.172.7-4.346,1.058-6.518A1.78,1.78,0,0,0,29.208,3.519ZM15.82,19.64a4.361,4.361,0,1,1,4.386-4.334A4.359,4.359,0,0,1,15.82,19.64Zm8.7-15.246a1.832,1.832,0,0,1-.436.357,5.524,5.524,0,0,1-1.454.541,20.191,20.191,0,0,1-2.9.485,37.5,37.5,0,0,1-3.791.188,37.891,37.891,0,0,1-4.332-.238,15.852,15.852,0,0,1-3.146-.633,6.893,6.893,0,0,1-.883-0.381,1.385,1.385,0,0,1-.386-0.3A0.443,0.443,0,0,1,7.2,3.746,1.752,1.752,0,0,1,7.61,3.43a5.392,5.392,0,0,1,1.359-.512,20.355,20.355,0,0,1,2.994-.509,37.618,37.618,0,0,1,4.967-.172,30.478,30.478,0,0,1,4.55.431,10.33,10.33,0,0,1,2.075.545,5.336,5.336,0,0,1,.683.346,1.085,1.085,0,0,1,.288.266A0.422,0.422,0,0,1,24.522,4.394Zm1.664,18.367a0.955,0.955,0,0,1-.021.271c-0.305,1.6-.614,3.2-0.911,4.811a2.6,2.6,0,0,1-.724,1.377,5.442,5.442,0,0,1-1.448,1.023A12.151,12.151,0,0,1,20,31.274a18.806,18.806,0,0,1-3.563.407,20.746,20.746,0,0,1-5.917-.7,9.9,9.9,0,0,1-2.3-.953,5.078,5.078,0,0,1-1.042-.789,2.6,2.6,0,0,1-.741-1.4c-0.3-1.6-.609-3.207-0.915-4.81A1.12,1.12,0,0,1,5.5,22.79a0.479,0.479,0,0,1,.724-0.423c0.036,0.021.072,0.041,0.105,0.063a13.221,13.221,0,0,0,3.858,1.856,18.062,18.062,0,0,0,3.873.758,19.587,19.587,0,0,0,4.54-.11,16.41,16.41,0,0,0,5.687-1.827c0.354-.194.686-0.43,1.025-0.646a1.715,1.715,0,0,1,.167-0.1A0.48,0.48,0,0,1,26.186,22.761Zm-8.159-7.477a2.185,2.185,0,1,1-2.177-2.193A2.192,2.192,0,0,1,18.027,15.284Z" transform="translate(-2.122)"/>
  </symbol>
  <symbol id="icons-check" viewBox="0 0 14.5 10">
    <path d="M7.25,14a1,1,0,0,1-.707-0.293l-4.5-4.5A1,1,0,0,1,3.457,7.793L7.25,11.586l7.293-7.293a1,1,0,0,1,1.414,1.414l-8,8A1,1,0,0,1,7.25,14Z" transform="translate(-1.75 -4)"/>
  </symbol>
  <symbol id="icons-chevron-right" viewBox="0 0 11 18">
    <polyline points="1 1 10 9 1 17" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
  </symbol>
  <symbol id="icons-chevron-down" viewBox="0 0 18 11">
    <polyline points="17 1 9 10 1 1" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></polyline>
  </symbol>
  <symbol id="icons-close" viewBox="0 0 30 30">
    <path d="M21,22.2c-0.3,0-0.5-0.1-0.7-0.3L15,16.6l-5.3,5.3c-0.4,0.4-1,0.4-1.4,0s-0.4-1,0-1.4l5.3-5.3L8.3,9.9c-0.4-0.4-0.4-1,0-1.4s1-0.4,1.4,0l5.3,5.3l5.3-5.3c0.4-0.4,1-0.4,1.4,0s0.4,1,0,1.4l-5.3,5.3l5.3,5.3c0.4,0.4,0.4,1,0,1.4C21.5,22.1,21.3,22.2,21,22.2z"/>
  </symbol>
  <symbol id="icons-external" viewBox="0 0 18 18">
    <path d="M15.462,3.306A0.5,0.5,0,0,0,15,3H4.084a0.5,0.5,0,0,0,0,1h9.709L2.646,15.144a0.5,0.5,0,1,0,.707.707L14.5,4.7v9.708a0.5,0.5,0,0,0,1,0V3.5A0.5,0.5,0,0,0,15.462,3.306Z" transform="translate(0)"/>
    <rect width="18" height="18" fill="none"/>
  </symbol>
  <symbol id="icons-github" viewBox="0 0 24 23.41">
    <path d="M24.336,7.791A12.011,12.011,0,0,1,25.52,23.366a12.083,12.083,0,0,1-5.883,4.313A0.686,0.686,0,0,1,19,27.549a0.648,0.648,0,0,1-.187-0.457l0.023-3.281a3.861,3.861,0,0,0-.258-1.395,2.219,2.219,0,0,0-.562-0.832,7.008,7.008,0,0,0,3.738-1.348Q23.41,19.03,23.5,15.655a5.127,5.127,0,0,0-.34-1.782,4.569,4.569,0,0,0-.9-1.43,3.254,3.254,0,0,0,.234-1.078,4.936,4.936,0,0,0-.352-2.109,1.719,1.719,0,0,0-.8.035A7.4,7.4,0,0,0,18.84,10.5a11.493,11.493,0,0,0-6,0,7.4,7.4,0,0,0-2.508-1.207,1.719,1.719,0,0,0-.8-0.035,4.936,4.936,0,0,0-.352,2.109,3.254,3.254,0,0,0,.234,1.078,4.569,4.569,0,0,0-.9,1.43,5.127,5.127,0,0,0-.34,1.782Q8.27,19.03,9.91,20.237a6.976,6.976,0,0,0,3.75,1.348,1.934,1.934,0,0,0-.48.633,3.414,3.414,0,0,0-.293.984,3.316,3.316,0,0,1-1.594.293,2.42,2.42,0,0,1-1.9-1.3,3.234,3.234,0,0,0-.645-0.75,1.767,1.767,0,0,0-1.184-.469q-0.7.023-.527,0.3a1.324,1.324,0,0,0,.551.469,2.583,2.583,0,0,1,.75.82,5.653,5.653,0,0,1,.469.867,2.2,2.2,0,0,0,.984,1.172,4.5,4.5,0,0,0,3.047.258l0.023,2.227a0.648,0.648,0,0,1-.187.457,0.686,0.686,0,0,1-.633.129A12.083,12.083,0,0,1,6.16,23.366,12,12,0,0,1,24.336,7.791Z" transform="translate(-3.84 -4.287)"/>
  </symbol>
  <symbol id="icons-overflow" viewBox="0 0 18 4.688">
    <path fill="currentColor" d="M2.344,7.656A1.344,1.344,0,1,1,1,9,1.345,1.345,0,0,1,2.344,7.656m0-1A2.344,2.344,0,1,0,4.688,9,2.344,2.344,0,0,0,2.344,6.656h0Z" transform="translate(0 -6.656)"/><path fill="currentColor" d="M9,7.656A1.344,1.344,0,1,1,7.656,9,1.345,1.345,0,0,1,9,7.656m0-1A2.344,2.344,0,1,0,11.344,9,2.344,2.344,0,0,0,9,6.656H9Z" transform="translate(0 -6.656)"/><path fill="currentColor" d="M15.656,7.656A1.344,1.344,0,1,1,14.313,9a1.345,1.345,0,0,1,1.344-1.344m0-1A2.344,2.344,0,1,0,18,9a2.344,2.344,0,0,0-2.344-2.344h0Z" transform="translate(0 -6.656)"/>
  </symbol>
  <symbol id="icons-play" viewBox="0 0 30 30">
    <path d="M25.615,13.268a2,2,0,0,1,0,3.464l-7.5,4.33-7.5,4.33a2,2,0,0,1-3-1.732V6.34a2,2,0,0,1,3-1.732l7.5,4.33Z" transform="translate(0 0)"/>
    <rect width="30" height="30" fill="none"/>
  </symbol>
  <symbol id="icons-select" viewBox="0 0 18 18">
    <path d="M6.161,7.01L8.608,3.123a0.5,0.5,0,0,1,.846,0L11.9,7.01a0.5,0.5,0,0,1-.423.766h-4.9A0.5,0.5,0,0,1,6.161,7.01Z"/>
    <path d="M11.9,10.99L9.455,14.877a0.5,0.5,0,0,1-.846,0L6.161,10.99a0.5,0.5,0,0,1,.423-0.766h4.9A0.5,0.5,0,0,1,11.9,10.99Z"/>
    <rect width="18" height="18" fill="none"/>
  </symbol>
</svg>

    <header class="grid-block shrink header">
  <div class="grid-block grid-container justify-justified">
    <a href="/" class="grid-block align-center shrink logo">
      <img class="img" src="images/runnable-logo.svg" height="36" width="192">
    </a>
    <nav class="nav grid-block shrink">
      <a href="docs/" class="grid-content btn btn-sm text-white weight-strong hidden-xs a">Docs</a>
      <a href="for/" class="grid-content btn btn-sm text-white weight-strong hidden-sm a">Product</a>
      <a href="pricing/" class="grid-content btn btn-sm text-white weight-strong hidden-md">Pricing</a>
      <a href="signin/" class="grid-content btn btn-sm text-white weight-strong hidden-md js-hide-if-signed-in">Sign In</a>
      <a href="signup/" class="grid-content btn btn-sm btn-white text-white weight-strong hidden-xs js-hide-if-signed-in track-sign-up">Sign Up</a>
      <div class="grid-content btn btn-sm btn-overflow popover-trigger hover has-links" tabindex="1">
        <svg class="icons icons-overflow">
          <use xlink:href="#icons-overflow">
        </svg>
        <div class="popover-hover-wrapper right-align-sm">
  <div class="grid-block popover popover-header-menu bottom">
    <div class="grid-block col list text-left">
      <a href="signup/" class="list-item-a visible-xs js-hide-if-signed-in track-sign-up">Sign Up</a>
      <a href="signin/" class="list-item-a visible-md js-hide-if-signed-in">Sign In</a>
      <div class="list-item divider visible-md"></div>
      <a href="docs/" class="list-item-a visible-xs">Docs</a>
      <a href="for/" class="list-item-a visible-sm">Product</a>
      <a href="pricing/" class="list-item-a visible-md"><span class="text-request">Pricing</a>
      <a href="how-it-works/" class="list-item-a">How It Works</a>
      <a href="https://runnable.com/use-cases/" class="list-item-a">Use Cases</a>
      <a href="demo/" class="list-item-a">Request Demo</a>
      <a href="http://blog.runnable.com" class="list-item-a">Blog</a>
      <a href="about/" class="list-item-a">About</a>
    </div>
  </div>
</div>

      </div>
    </div>
  </nav>
</header>


    <main class="grid-block col main hero-only">
      <article class="grid-block col noscroll hero product-hero">
  
  
  
  
    <h1 class="grid-content h1 text-center">Continuous integration & delivery for all code branches.</h1>
  
  <p class="grid-content p text-center">I’m interested in:</p>
  <div class="grid-block noscroll align-center justify-center popover-wrapper">
    <div class="grid-block shrink btn btn-lg btn-white popover-trigger click" tabindex="1">
      
      
      
      
        <span class="ci-cd">Continuous Integration & Delivery</span>
      
      <svg class="icons">
        <use xlink:href="#icons-select">
      </svg>
      
      
      
      
        <ul class="popover text-center active-ci-cd">
      
        <li class="li">
          
          
            <a class="a" href="/for/">Everything</a>
          
        <li class="li">
          
          
            <a class="a" href="/for/test-automation/">Test Automation</a>
          
        <li class="li">
          
          
            <a class="a" href="/for/docker/">Docker</a>
          
        <li class="li">
          
            <a class="a active">Continuous Integration & Delivery</a>
          
          
      </ul>
    </div>
  </div>
</article>

      <article class="article article-native-docker">
  <section class="grid-container section">
    <h2 class="h2 weight-strong text-center">Native support for Docker.</h2>
    <p class="text-center">Runnable is built on Docker and its supporting technologies, so you're never locked into a proprietary format or system. <a href="/how-it-works/#behind-the-scenes" class="link">Read more</a> about Runnable's technology.</p>
  </section>

  <section class="grid-block col section section-dark">
    <div class="grid-container-lg grid-block justify-center">
      <ul class="grid-block col card padding-md">
        <li class="grid-block margin-bottom-sm padding-sm col-xxs">
          <img src="images/for/icons-setup.svg" class="grid-content shrink img margin-right-md" src="" width="75" height="75">
          Enable the benefits of Docker without the complicated setup.
        <li class="grid-block margin-bottom-sm padding-sm col-xxs">
          <img src="images/for/icons-export-docker.svg" class="grid-content shrink img margin-right-md" src="" width="75" height="75">
          Export your Docker images, Dockerfiles and assets at any time.
        <li class="grid-block margin-bottom-sm padding-sm col-xxs">
          <img src="images/for/icons-dockerize.svg" class="grid-content shrink img margin-right-md" src="" width="75" height="75">
          Deploy to production using any of the growing number of Docker-supported solutions.
      </ul>
    </div>
  </section>
</article>

      <article class="article article-overview">
  <section class="grid-block justify-center section section-carousel hidden-sm">
    <div class="grid-container grid-block">
      <figure class="grid-block figure">
        <img class="img js-toggle fade in" src="images/for/sidebar-1.png" data-toggle="1" height="650" width="723">
        <img class="img js-toggle fade" src="images/for/sidebar-2.png" data-toggle="2" height="650" width="723">
        <img class="img js-toggle fade" src="images/for/sidebar-3.png" data-toggle="3" height="650" width="723">
      </figure>
      <div class="grid-block shrink col card">
        <button class="grid-content btn-radio text-left js-toggler active" data-toggler="1">
          <h3 class="p weight-strong">Automated</h3>
          <p class="p">Every code branch gets its own running app that’s kept up-to-date.</p>
        </button>
        <button class="grid-content btn-radio text-left js-toggler" data-toggler="2">
          <h3 class="p weight-strong">Full-stack</h3>
          <p class="p">Running apps include all services and dedicated databases to verify changes end-to-end.</p>
        </button>
        <button class="grid-content btn-radio text-left js-toggler" data-toggler="3">
          <h3 class="p weight-strong">Tested</h3>
          <p class="p">Your apps always run on a clean environment, perfect for demos or running tests.</p>
        </button>
      </div>
    </div>
  </section>

  <section class="grid-block col align-center section section-carousel visible-sm">
    <p class="p weight-strong">Available</p>
    <p class="p">Changes are always ready to test with automatic environments for every branch of every repository.</p>
    <figure class="figure">
      <img class="img" src="images/for/sidebar-1.png" height="650" width="723">
    </figure>
  </section>

  <section class="grid-block col align-center section section-carousel visible-sm section-purple">
    <p class="p weight-strong">Full-stack</p>
    <p class="p">Environments include all your services and replicated databases, with up-to-date configs.</p>
    <figure class="figure">
      <img class="img" src="images/for/sidebar-2.png" height="650" width="723">
    </figure>
  </section>

  <section class="grid-block col align-center section section-carousel visible-sm section-green">
    <p class="p weight-strong">Test E2E</p>
    <p class="p">Run end-to-end or integration tests with every code change, with Selenium/Webdriver support.</p>
    <figure class="figure">
      <img class="img" src="images/for/sidebar-3.png" height="650" width="723">
    </figure>
  </section>

  <section class="grid-block justify-center section-video">
    <a class="grid-block shrink align-center a" href="https://www.youtube.com/watch?v=bZNbWoLcZq4&index=2&list=PLq6TD6bZGZkZITy0W6PnqlerCzrgOd4qm" target="_blank">
      <div class="grid-block shrink justify-center align-center video margin-right-sm">
        <svg class="icons">
          <use xlink:href = "#icons-play">
        </svg>
      </div>
      <div class="grid-block col justify-center shrink p text-gray caption">See Runnable in action.</div>
    </a>
  </section>
</article>

      <article class="article article-tests">
  <section class="grid-container section">
    <h2 class="h2 weight-strong text-center">Run your automated tests on every branch.</h2>
    <p class="text-center">Your app runs on an isolated environment that’s fresh and clean, so it’s perfect for running tests. <br class="hidden-md">Branch updates are automatically tested end-to-end.</p>
  </section>

  <section class="grid-block col align-center section section-quote text-gray">
    <blockquote class="quote-bubble text-center">
      <div class="arrow"></div>
      Runnable environments make it easy for everyone to see the impact of a change before it goes to production.
    </blockquote>
    <div class="grid-block align-center shrink quote-attribution">
      <img class="grid-content shrink avatar" src="images/for/ian-grayson.png" alt="Ian Grayson">
      Ian Grayson, Convoy
      <br>
      Senior Software Engineer
    </div>
  </section>

  <section class="grid-block justify-center section section-dark">
    <div class="grid-container-lg grid-block">
      <ul class="grid-block col card padding-md">
        <li class="grid-block align-center shrink margin-bottom-sm padding-sm col-xxs">
          <img class="grid-content shrink img margin-right-md" src="images/for/icons-auto-test.svg" width="75" height="75">
          Set your tests to run <br class="hidden-md">automatically.
        <li class="grid-block align-center shrink margin-bottom-sm padding-sm col-xxs">
          <img class="grid-content shrink img margin-right-md" src="images/for/icons-end-to-end.svg" width="75" height="75">
          Test APIs and Front-ends with your full stack, end-to-end.
        <li class="grid-block align-center shrink margin-bottom-sm padding-sm col-xxs">
          <img class="grid-content shrink img margin-right-md" src="images/for/icons-slack.svg" width="75" height="75">
          View the results on GitHub’s pull request page, and on Slack.
      </ul>
      <div class="grid-block col test-types-wrapper">
        <p class="margin-bottom-sm">Supports several types of testing:</p>
        <div class="grid-block test-types">
          <ul class="ul grid-block col">
            <li class="li margin-bottom-xxs">
              <svg class="icons icons-check text-green margin-right-xxs">
                <use xlink:href="#icons-check">
              </svg>
              Functional
            <li class="li margin-bottom-xxs">
              <svg class="icons icons-check text-green margin-right-xxs">
                <use xlink:href="#icons-check">
              </svg>
              Integration
            <li class="li margin-bottom-xxs">
              <svg class="icons icons-check text-green margin-right-xxs">
                <use xlink:href="#icons-check">
              </svg>
              Selenium/Webdriver
            <li class="li margin-bottom-xxs">
              <svg class="icons icons-check text-green margin-right-xxs">
                <use xlink:href="#icons-check">
              </svg>
              Protractor
          </ul>
          <ul class="ul grid-block col">
            <li class="li margin-bottom-xxs">
              <svg class="icons icons-check text-green margin-right-xxs">
                <use xlink:href="#icons-check">
              </svg>
              End-to-end
            <li class="li margin-bottom-xxs">
              <svg class="icons icons-check text-green margin-right-xxs">
                <use xlink:href="#icons-check">
              </svg>
              Headless
            <li class="li">
              <svg class="icons icons-check text-green margin-right-xxs">
                <use xlink:href="#icons-check">
              </svg>
              Regression
          </ul>
        </div>
      </div>
    </div>
  </section>
</article>

      <article class="article article-seamless-workflow">
  <section class="grid-container section">
    <h2 class="h2 weight-strong text-center">Seamless integration with your tools.</h2>
    <p class="text-center">URLs, test results, and statuses for your running apps are presented right where you need them.</p>
  </section>

  <section class="grid-block justify-center section section-dark">
    <ul class="grid-container-lg grid-block justify-center">
      <li class="grid-block col align-center card padding-xl">
        <img class="grid-content shrink img margin-bottom-lg" src="images/for/notification.png" width="400" height="200">
        Seamless GitHub integration manages the environments that run your app.
      <li class="grid-block col align-center card padding-xl">
        <img class="grid-content shrink img margin-bottom-lg" src="images/for/runnabot.png" width="400" height="200">
        Pull request and Slack integration shares running app URLs and test results.
    </ul>
  </section>
</article>

      <article class="article article-easy-setup">
  <section class="grid-container section">
    <h2 class="h2 weight-strong text-center">Start running fast.</h2>
    <p class="p text-center">Set up once and get unlimited environments to run your app.</p>
    <ul class="grid-block margin-top-md list-features">
      <li class="grid-block col padding-sm li">
        <img src="images/for/icons-point-and-click.svg" class="grid-block shrink img margin-bottom-sm margin-right-sm-md" width="81" height="81">
        <p class="p">Point & click your way to running each service of your app.</p>
      <li class="grid-block col padding-sm li">
        <img src="images/for/icons-dockerfile.svg" class="grid-block shrink img margin-bottom-sm margin-right-sm-md" width="81" height="81">
        <p class="p">Import your existing Dockerfile to set up your app even faster.</p>
      <li class="grid-block col padding-sm li">
        <img src="images/for/icons-branches.svg" class="grid-block shrink img margin-bottom-sm margin-right-sm-md" width="81" height="81">
        <p class="p">Select a branch to run your app. New branches will automatically have a running app.</p>
    </ul>
  </section>

  <section class="grid-block col align-center section section-quote text-gray">
    <blockquote class="quote-bubble text-center">
      <div class="arrow"></div>
      After a few hours we were up and running. Now we have test environments per feature without managing the orchestration.
    </blockquote>
    <div class="grid-block align-center shrink quote-attribution">
      <img class="grid-content shrink avatar" src="images/for/alex-morse.png" alt="Alex Morse">
      Alex Morse, Cratejoy
      <br>
      Co-founder & CTO
    </div>
  </section>
</article>

      <section class="section section-product-cta">
  <div class="grid-block grid-container col align-center">
    <p class="grid-content p text-white text-center padding-left-sm-xs padding-right-sm-xs">See what your team’s workflow will look like with Runnable.</p>
    <a class="grid-content btn btn-lg btn-white" href="how-it-works/">How It Works</a>
  </div>
</section>

    </main>

    <footer class="grid-block col footer justify-spaced">
  <a href="signup/" class="sign-up-box grid-block col well well-anchor track-sign-up">
  <img class="img no-touching" src="images/runnabear-hello.png">
  <p class="p js-modal">Try Runnable! It’s <strong class="weight-strong">free</strong> for 14 days.
  <div href="signup/" class="btn btn-sm green track-sign-up">Sign Up</div>
</a>

  <aside class="grid-block aside-support">
  <div class="grid-block col justify-center support-text">
    <p class="p weight-strong">Our engineers are here for you.</p>
    <p class="p">We can answer questions about Docker <br class="br">and help you set up your stack.</p>
  </div>
  <figure class="grid-block col figure shrink">
    <div class="grid-block shrink bubble">
      <img class="img float-left" src="images/logos/logo-slack.svg" height="18" width="18" alt="Slack">
      <div class="grid-block col">
        <div class="user">
          <strong class="strong user-name">Jorge</strong>
          <span class="user-time"> 4:19 PM</span>
        </div>
        <p class="p user-text">Can I run multiple commands?</p>
      </div>
    </div>
    <div class="grid-block shrink bubble">
      <img class="img float-left" src="images/runnabot-head.png" height="18" width="18" alt="Slack">
      <div class="grid-block col">
        <div class="user">
          <strong class="strong user-name">Taylor</strong>
          <span class="user-time"> 4:20 PM</span>
        </div>
        <p class="p user-text">Hi <span class="link-blue">@jorge</span>!
          <br>Yes you can. Here’s how: …
        </p>
      </div>
    </div>
  </figure>
</aside>

  <div class="grid-block link-wrapper">
    <div class="grid-block col align-start">
      <a href="docs/" class="btn btn-xs link weight-strong">Docs</a>
      <a href="for/" class="btn btn-xs link weight-strong">Product</a>
      <a href="pricing/" class="btn btn-xs link weight-strong">Pricing</a>
      <a href="how-it-works/" class="btn btn-xs link weight-strong">How It Works</a>
      <a href="https://runnable.com/docker/" class="btn btn-xs link weight-strong">Docker Guides</a>
      <a href="demo/" class="btn btn-xs link weight-strong">Request Demo</a>
    </div>
    <div class="grid-block col align-start">
      <a href="https://runnable.com/use-cases/" class="btn btn-xs link weight-strong">Use Cases</a>
      <a href="http://blog.runnable.com" class="btn btn-xs link weight-strong">Blog</a>
      <a href="about/" class="btn btn-xs link weight-strong">About</a>
      <a href="legal/privacy-policy/" class="btn btn-xs link weight-strong">Privacy</a>
      <a href="legal/terms-of-service/" class="btn btn-xs link weight-strong">Terms</a>
      <a href="legal/acceptable-use-policy/" class="btn btn-xs link weight-strong">Acceptable Use</a>
    </div>
  </div>
</footer>

    <div class="modal-backdrop" id="sign-up">
  <header class="grid-block shrink header">
  <div class="grid-block grid-container align-center justify-justified">
    
    <a class="grid-content shrink logo hidden-sm">
      <img class="img" src="images/runnable-logo.svg" height="36" width="192">
    </a>
    
    
    
    <div class="grid-block shrink align-center">
      
      <a class="grid-block align-center shrink btn btn-sm btn-white js-open-bitbucket track-bitbucket">
        <svg class="icons icons-bitbucket">
          <use xlink:href="#icons-bitbucket">
        </svg>
        <span>Sign Up with Bitbucket</span>
      </a>
      <a class="grid-block align-center justify-center btn btn-sm btn-white js-open-github hide">
        <svg class="icons icons-github">
          <use xlink:href="#icons-github">
        </svg>
        <span>Sign Up with GitHub</span>
      </a>
      
      
      <a class="grid-block align-center btn btn-sm btn-white js-modal-close">
        <svg class="icons icons-close">
          <use xlink:href="#icons-close">
        </svg>
        <span>Close</span>
      </a>
      
    </div>
  </div>
</header>

  <div class="modal">
    <article class="grid-block col align-center noscroll article article-form article-github article-sign-up slide in">
  <h1 class="grid-content shrink h2 text-white weight-strong text-center">Add your code to speed up your development.</h1>
  <p class="grid-content shrink p text-center text-white">Free for 14 days.<br class="visible-xxxs"> No card required.</p>
  <div class="grid-block col card shake-me">
    <img class="img" src="images/runnabear-peek.png" height="130" width="230">
    <form class="grid-block col form form-github js-form">
      <div class="grid-block col form-wrapper">
        <div class="grid-content input-group-vertical">
          <label class="label" for="input-email">Work Email</label>
          <input class="input input-md input-validate pristine" id="input-email" name="email" pattern="\S+@\S+\.\S+" placeholder="runnabear@runnable.com" title="Enter a valid email."  type="email" required>
        </div>
        <div class="grid-content input-group-vertical">
          <label class="label" for="input-name">Company Name</label>
          <input class="input input-md input-validate pristine" id="input-name" name="name" placeholder="Runnable" title="Enter the name of the company you work for." required>
        </div>
        <p class="text-center margin-top-md margin-bottom-xs">I want Runnable to help <br class="visible-xs hidden-xxxs">my team with:</p>
        <div class="grid-block col checkbox-group pristine">
          <label class="grid-block align-center checkbox-label">
            <input class="checkbox-input" name="checkbox-why" type="checkbox" value="E2E Testing" required>
            <div class="grid-block shrink margin-right-xs checkbox"></div>
            End-to-End Testing
          </label>
          <label class="grid-block align-center checkbox-label">
            <input class="checkbox-input" name="checkbox-why" type="checkbox" value="CI/CD" required>
            <div class="grid-block shrink margin-right-xs checkbox"></div>
            CI / CD
          </label>
          <label class="grid-block align-center checkbox-label">
            <input class="checkbox-input" name="checkbox-why" type="checkbox" value="Staging Environments" required>
            <div class="grid-block shrink margin-right-xs checkbox"></div>
            <span class="hidden-xs">Persistent&nbsp;</span>Staging Environments
          </label>
          <label class="grid-block align-center checkbox-label">
            <input class="checkbox-input checkbox-other" name="checkbox-why" type="checkbox" value="Other" required>
            <div class="grid-block shrink margin-right-xs checkbox"></div>
            <span class="span-other">Other</span>
            <input class="grid-block input-other pristine" name="why-other" placeholder="Other (please specify)" autofocus>
          </label>
        </div>
        <div class="well well-red text-center small padding-xxs margin-top-md hide"></div>
      </div>
      <footer class="grid-block col justify-center card-footer">
        <button data-href="{{loginUrl}}" class="grid-block noscroll justify-center align-center btn btn-lg green wrap-xxxs js-submit track-grant-access-github">
          <div class="grid-block justify-center align-center noscroll">
            <svg class="icons hidden-xxs">
              <use xlink:href="#icons-github">
            </svg>
            <span>Sign Up With GitHub</span>
          </div>
        </button>
        <p class="grid-content shrink p padding-top-sm text-center">By continuing, you are agreeing to<br class="br hidden-xs"> our <a href="legal/terms-of-service/" class="link">terms of service</a>.</p>
      </footer>
    </form>
  </div>
  <div class="grid-content text-center text-white">
    <a href="signin/" class="link">Sign in</a> if your team is already using Runnable.
  </div>
</article>

<article class="grid-block col align-center noscroll article article-form article-sign-up article-bitbucket slide">
  <div class="grid-block col card shake-me">
    <img class="img" src="images/runnabear-pop.png" height="130" width="230">
    <form class="grid-block col form form-bitbucket show js-form">
      <div class="grid-block col form-wrapper">
        <label class="p text-center padding-sm" for="input-name">We’ll let you know when we roll out Bitbucket support.</label>
        <div class="grid-block col show">
          <div class="grid-content input-group-vertical input-group-org">
            <label class="label" for="input-name">Your Name</label>
            <input class="input input-md input-validate pristine" id="input-name" name="name" placeholder="Runnabear" title="Enter your name, so we can be bffs." required>
          </div>
          <div class="grid-content input-group-vertical input-group-org">
            <label class="label" for="input-email">Work Email</label>
            <input class="input input-md input-validate pristine" id="input-email" name="email" pattern="\S+@\S+\.\S+" placeholder="runnabear@runnable.com" title="Enter a valid email for us to follow up with."  type="email" required>
          </div>
        </div>
      </div>
      <footer class="card-footer">
        <button class="grid-block justify-center align-center btn btn-lg green wrap-xxxs">
          <div class="grid-block justify-center align-center">
            <svg class="icons hidden-xxxs">
              <use xlink:href="#icons-bitbucket">
            </svg>
            <span class="grid-content shrink">Notify Me</span>
          </div>
        </button>
      </footer>
    </form>
    <div class="grid-block col justify-center padding-lg hide">
      <p class="p text-center">Thanks, we’ll be in touch! 🙌</p>
    </div>
  </div>
</article>


  </div>
</div>

<div class="modal-backdrop" id="sign-in">
  <header class="grid-block shrink header">
  <div class="grid-block grid-container align-center justify-justified">
    
    <a class="grid-content shrink logo hidden-sm">
      <img class="img" src="images/runnable-logo.svg" height="36" width="192">
    </a>
    
    
    
    <div class="grid-block shrink align-center">
      
      
      <a class="grid-block align-center btn btn-sm btn-white js-modal-close">
        <svg class="icons icons-close">
          <use xlink:href="#icons-close">
        </svg>
        <span>Close</span>
      </a>
      
    </div>
  </div>
</header>

  <div class="modal">
    <article class="grid-block noscroll col article article-form article-sign-in">
  <div class="grid-block col card padding-top-sm">
    <img class="img" src="images/runnabear-peek.png" height="130" width="230">
    <div class="grid-block col padding-lg form-wrapper">
      <a href="{{loginUrl}}" class="grid-block justify-center align-center btn btn-lg green track-sign-in">
        <svg class="icons hidden-xs">
          <use xlink:href="#icons-github">
        </svg>
        <span>Sign In With GitHub</span>
      </a>
      <p class="grid-content shrink p padding-top-sm text-center">By continuing, you are agreeing to<br class="hidden-xs"> our <a href="legal/terms-of-service/" class="link">terms of service</a>.</p>
    </div>
  </div>
  <div class="grid-content text-center text-white">
    <a href="signup/" class="link">Sign up</a> if your team isn’t using Runnable yet.
  </div>
</article>

  </div>
</div>


    <!-- segment.io-->
<script>
  var match,
    pl     = /\+/g,  // Regex for replacing addition symbol with a space
    search = /([^&=]+)=?([^&]*)/g,
    decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
    query  = window.location.search.substring(1),
    urlParams = {};
  while (match = search.exec(query))
    urlParams[decode(match[1])] = decode(match[2]);
  !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.1.0";
    analytics.load("m1OwMrg9ytNWONfJ0J1ig8GOH91MkWNT");
  }}();
  analytics.ready( function() {
    ga('require', 'GTM-5T3HJWM');
    ga('require', 'linker');
    ga('linker:autoLink', ['runnable.io', 'runnable.com']);
    analytics.page({
      clientId: ga.getAll()[0].get('clientId'),
      querystrings: urlParams
    });
    var signUp = document.getElementsByClassName('track-sign-up');
    var signIn = document.getElementsByClassName('track-sign-in');
    var github = document.getElementsByClassName('track-github');
    var bitbucket = document.getElementsByClassName('track-bitbucket');
    var grantGitHubPerms = document.getElementsByClassName('track-grant-access-github');
    analytics.trackLink(signUp, 'Clicked Sign Up');
    analytics.trackLink(signIn, 'Clicked Sign In');
    analytics.trackLink(github, 'Clicked GitHub');
    analytics.trackLink(bitbucket, 'Clicked Bitbucket');
    analytics.trackLink(grantGitHubPerms, 'Clicked Grant GitHub Permissions');

    // Attach anonymous_id to links
    var aid = analytics.user().anonymousId();
    for (var j=0; j<signIn.length; j++) {
      append_id(signIn[j], aid, 'Signed%20In');
    }
    for (var k=0; k<grantGitHubPerms.length; k++) {
      append_id(grantGitHubPerms[k], aid, 'Signed%20Up');
    }
    function append_id(link, id, event) {
      ga(function(tracker) {
        link.addEventListener('click', link.href=link.href+'%26ajs_aid='+id+'%26ajs_event='+event+'%26'+tracker.get('linkerParam'));
      });
    }
  });
</script>
<script>
  analytics.ready(function(){
    ga('require', 'Clearbit', {
      mapping: {
        companyName:           'dimension3',
        companyEmployeesRange: 'dimension4',
        companyTags:           'dimension5',
        companyTech:           'dimension6',
        companySubIndustry:    'dimension7',
        companyIndustry:       'dimension8',
        companyIndustryGroup:  'dimension9',
        companySector:         'dimension10',
        companyType:           'dimension11',
        companyDomain:         'dimension12'
      }
    });
  });
</script>

<script async src="https://ga.clearbit.com/v1/ga.js?authorization=pk_1bc83be89f2224b36e22e6fc5d1013ea"></script>
<!-- statuspage.io -->
<script async src="https://cdn.statuspage.io/se-v2.js"></script>

